export default [{
    id:"1",
    type:"input",
    data:{label:       
        "NodeJS",        
        value:"это кросс-платформенная среда выполнения JavaScript с открытым исходным кодом; среда выполнения JavaScript, основанная на JavaScript движке V8 из Chrome; Node.js спроектирован для построения масштабируемых сетевых приложений"       
    },
    position:{ x:500,y:200},
    draggable:true,    
},
{
    id:"2",    
    data:{label:"I/O",
    value:"вход/выход"       
    },
    position:{ x:0,y:500},        
    draggable:true,    
},
{
    id:"3",    
    data:{label:"Неблокирующая модель ввода/вывода",
    value:"означает, что при выполнении операции ввода/вывода вызывающий поток не блокируется, а сразу получает возвращаемое значение, определяющее текущее состояние ввода/вывода." },
    position:{ x:-100,y:700},
    draggable:true,
    type:'output'
},
{
    id:"4",    
    data:{label:"Блокирующего ввода-вывода",
    value:"более простая и распространенная модель, которая блокирует вызывающий поток при выполнении операции ввода-вывода. В частности, операционная система переводит вызывающий поток в состояние блокировки, чтобы перенаправить процессор на другие выполняющиеся процессы."},
    position:{ x:100,y:700},
    draggable:true,
    type:'output'
},

{
    id:"5",    
    data:{label:"Процесс (Process)",
    value : "компьютерная программа, представляющая собой совокупность данных о выполняемой деятельности, является системой распределения ресурсов и планирования работы основной единицы, составляет основу структуры операционной системы, процесс является контейнером потоков"    
},
    position:{ x:500,y:500},
    draggable:true,
    
},
{
    id:"6",    
    data:{label:
        
          "Потоки",
      
      
     value: "наименьшая единица операционной системы, которая может быть использована для вычислений и планирования. Прежде всего, следует уточнить, что потоки прикрепляются к процессам и содержатся внутри них. Поток может принадлежать только одному процессу, но процесс может иметь несколько потоков."
   
        },
    position:{ x:300,y:800},
    draggable:true,
    
},{
    id:"7",    
    data:{label:
        
           "Однопоточный процесс",
       
     
      value :"это процесс, в котором открыт только один поток."
     },
    position:{ x:100,y:1200},
    draggable:true,
    type:'output'
},{
    id:"8",    
    data:{label:
           "Главный поток",
       
    value:"первый поток, созданный в процессе, отвечающий за выполнение программы, управление ресурсами, создание и уничтожение потоков."
       },
    position:{ x:300,y:1200},
    draggable:true,
    type:'output'
},{
    id:"9",    
    data:{label:
           "Подпотоки",
       value :
      "это дополнительные потоки, созданные основным потоком, которые могут одновременно выполнять различные задачи, повышая тем самым эффективность и скорость отклика программы. Подпотоки могут совместно использовать данные и ресурсы основного потока или иметь собственные данные и ресурсы. Однако при этом может возникать конкуренция за ресурсы и проблемы синхронизации между различными подпотоками."
      },
    position:{ x:500,y:1200},
    draggable:true,
    type:'output'
},{
    id:"10",    
    data:{label:
           "Дочерний процесс",
       
           value : "это процесс, созданный другим процессом (родительским). Дочерний процесс наследует большинство атрибутов родительского процесса"
      },
    position:{ x:700,y:800},
    draggable:true,
    
},
{
    id:"11",    
    data:{label:"Синхронизация",
    value : "когда выполняется вызов функции, вызов не возвращается и не продолжает последующие операции до тех пор, пока не будет получен результат."
},
    position:{ x:700,y:1200},
    draggable:true,
    type:'output'

},
{
    id:"12",    
    data:{label:"Асинхронный",
    value : "При асинхронном вызове процедуры вызывающая сторона может продолжать выполнять последующие операции, не получая результата. Когда вызов завершается, вызывающая сторона обычно получает уведомление через статус, уведомления и обратные вызовы. При асинхронных вызовах возврат вызова не контролируется вызывающей стороной."
    },
    position:{ x:900,y:1200},
    draggable:true,
    type:'output'
},
{
    id:"13",    
    data:{label:"Цикл событий",
    value : "это то, что позволяет Node.js выполнять неблокирующие операции ввода-вывода - несмотря на то, что JavaScript является однопоточным - за счет того, что операции по возможности перекладываются на ядро системы."
},
    position:{ x:1000,y:500},
    draggable:true
},
{
    id:"14",    
    data:{label:"Таймер ",
    value : "это порог, после которого может быть выполнен обратный вызов, а не точное время, в которое человек хочет его выполнить."
},
    position:{ x:900,y:800},
    type:'output',
    draggable:true,
    
},
{
    id:"15",    
    data:{label:"Ожидающие обратные вызовы",
    value : "эта фаза выполняет обратные вызовы для некоторых системных операций, таких как типы ошибок TCP."
},
    position:{ x:1250,y:800},
    draggable:true,
    type:'output',

},
{
    id:"16",    
    data:{label:"Фаза опроса",
    value : "выполняет две основные функции:вычисление времени блокировки и опроса ввода/вывода, а затем обработка событий в очереди опроса."

},
    position:{ x:1800,y:800},
    type:'output',
    draggable:true,
},
{
    id:"17",    
    data:{label:"Обратные вызовы закрытия",
    value : "При резком закрытии розетки или ручки"
},
    position:{ x:1500,y:800},
    type:'output',

    draggable:true
},
{
    id:"18",    
    data:{label:"libuv",
    value : "кроссплатформенный событийно-управляемый слой абстракции, который инкапсулирует некоторые базовые возможности различных операционных систем и предоставляет унифицированный API."
    },
    position:{ x:-300,y:200},
    type:'output',
    draggable:true,
    targetPosition:'bottom',
},
{
    id:"19",    
    data:{label:"Параллельная система",
    value : "это система, в которой несколько задач выполняются одновременно, подразделяется на параллельный параллелизм и параллельный параллелизм с разделением времени. Здесь 'одновременный'для параллельного параллелизма означает один и тот же момент, точку во времени."

    },
    position:{ x:900,y:-200},
    
    draggable:true,
    
},
{
    id:"20",    
    data:{label:"многопоточный",

    },
    position:{ x:1500,y:-300},
    type:'output',
    
    draggable:true,
    targetPosition:'bottom',

    
},
{
    id:"21",    
    data:{label:"многопроцессный",

    },
    position:{ x:1500,y:-100},
    type:'output',
    
    draggable:true,
    targetPosition:'bottom',

    
}

]